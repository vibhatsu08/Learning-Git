Notes for the Git course by Colt Steele on Udemy
Github course - Colt Steele

What is Git?
Git is a VCS, It is a version control system, it helps to track and manages changes to files over time.
They help in revising earlier version of files, undoing changes, sharing code to others, team members ,etc. Git is one of many version control systems. 

What does Git help with?
To compare versions of a project, time travel to a previous version of files. Collaborate and compare changes with people. Github like games helps you to create or maintain checkpoints for your code or your project, so that you can go back to the previous checkpoint and start from there instead of starting from scratch every single time. 

Difference between Git and Github
Git exists locally on your system, you don’t need internet to use it, whereas Github is a service which uses Git to work, it hosts your local repositories on your local machine to publish it on the cloud. You do need an internet connection to use Github. Once you changes or update your project via git on your local machine, you can update or upload that project to Github, which can be used by other people to collaborate with your project. Git and Github are not the same thing, Github is a tool that is built for Git and for Git users.

Installing Git: Terminal vs GUIs
What is a GUI? GUI stands for a graphical user interface. It’s basically a type of user interface which enables users to interact with the interface via graphical icons or graphical images. 

Terminal basics
ls - to list the contents of a directory.
cd - to change the directory.
rm - remove a particular file.
rmdir - remove a particular directory.
pwd - prints or displays the path for the current directory that is active.
open - opens the directory in a visual form instead of the terminal based text form.

Very basics of Git
A repository is a workspace which tracks and manages changes in the files within a given folder.
git log - Prints all the logs or entries done in that particular repository. 
git status - Gives information on the status of the current repository.
git init - initialises a new repository in the current folder on directory.
Use 'cd ~' or 'cd' - to navigate back to the home directory.
Use 'cd ..' to navigate up one directory level.
Use 'cd -' to navigate to the previous directory.

Git common mistake
Do not run git init command already inside an initialised git repository. Always use git status to check the status of the current git repository.

Git Committing workflow
Each commit has a description and a title, and each commit is a snapshot in time of your workflow or project in time. It's not the same as saving a file, its something that's built on top of saving the files.
The process of the committing workflow is like: Work on stuff, add changes, and commit the work done.

Adding
The 'git add' command is used to add changes to your existing workflow, or to stage the changes to be committed.
When a commit is made, you are actually changing the contents of the '.git' folder in the current repository.
You can 'git add' multiple files by separating the file names by a single space. 'git add filename1 filename2 ...'.
Git add adds the files in the staging area, which after being changes or modified, is tracked by Git, After being added to the staging area, the files are ready to be committed to the working repository.

Committing
The files after being added to the staging area are now ready to be committed using the 'git commit' command.
Whenever the 'git commit' command is used, Git, will ask you to enter a message, or a description that describes your particular git commit. 
This can be done by two ways, first way is to just type 'git commit', and then the terminal will open a VIM editor, where you need to write your git commit message.
The second way is to type the commit message in just one line, by using the 'git commit -m "your message"' command. 
The '-m' tells Git, that the text after the '-m' is supposed to be a Git commit message/description.

Logging
By using the 'git log' command, Git shows all the previous commits done in that repository, with the respective Git commit name, date, time, git description/message and with a git commit hash.
You can also use the 'git add .' command to add all the modified/changes files to the staging area.

Atomic commits
It means to keep each commit focussed on a single thing. It should refer to a single change. This makes it much easier to undo or comeback to the previous version.
It's better to name each file while committing, instead of using the 'git add .' command after changing something from all the files.
Makes the code easier to review, make the commits as tiny as possible. Keep them focussed on a single thing.

Writing commit messages
It's advised to write the commit messages in present tense. Write messages as if you are ordering the code base to do something.
Sometimes using past tense for commits makes more sense for writing commits. It doesn't matter as long as the commits made makes sense to whatever code base you are writing to.
If you are working on your personal project, do whatever makes sense, but if you are working on an open source public platform, read and follow the guidelines for the repository.

Configuring Git and writing better Git commit messages
One of the ways to write a git commit message is to use the 'git commit -m "your message"' command, and the other way is to use the 'git commit' message.
When you use the 'git commit' command, the VIM editor asks you to enter the commit message.
To start editing in the VIM editor, you need to enter into the INSERT mode, and by clicking the 'I' key, you can enter into the INSERT mode.
Once that's done you can start with writing your commit message. 
To exit the VIM editor, you need to click the ESCAPE key once, and then type ':wq' to save and quit the VIM editor. 'w' stands for write, which means to save whatever that's been written, and 'q' stands for quit, which means to quit the editor.

Closer look at the Log command
Commit messages are pretty descriptive, and because of that a whole chunk of the screen is occupied. 
To avoid things like that one of the ways to get cleaner results when using the 'git log' command is to use the 'git log --oneline' command.
By using this command, the logs printed would be in a much cleaner format, since the output shown in the terminal would only display the first line of the however descriptive message that you've written for your specific commit.
For this reason, it is advised that your commit messages should have the first line as a summary of the entire commit message that you have written or are going to write for the stuff that you are going to commit to a specific repository.

Amending commits
Forgetting to add files when commiting happens quite often. So instead of re committing all the work done that has already been covered in the previous commit, an other alternative is to use something called as the Git amend command.
The git amend command is as follows: 'git commit --amend'
The git amend command only works for your ongoing commit, it doesn't work for something like 5 commits ago. 
The git amend command is also useful if there are any typos made in the commit message or you've forgotten to add a file to the staging area and you've already run the git commit command.

Ignoring files in Git
We can tell Git what files to ignore while committing, this helps to prevent adding any directories or files that might contain sensitive information for the user or for the particular device such as secrets, api keys, login credentials etc.
While adding files to the staging area, to avoid adding the files that you want to avoid, it's better to create a '.gitignore' folder and store all the files in that folder, and then instead of using the 'git add .' command, it's better to use 'git add filename' command, and manually add each of the files except the '.gitignore' folder.

Branching in Git
When we make a commit, each commit has a hash.
When working one a large scale project, at a big company, if the general way of commits is followed, which is in a linear fashion, then it would be practically impossible to work on things simultaneously, since each commit, would have a reference to the previous git commit.
Each person working on the project would be implementing something completely different in the project, it's practically impossible for the team members to be working on the project if there is only one branch, and few are working on implementing a feature in the project, whereas the others are working on fixing a bug which would need to scrap huge chunks of the previous build.
This is where Branches comes in Git. Branches is an essential part of Git, it helps create multiple timelines for a project, in which everyone could work on their own version of the branch, and the work done on one branch wouldn't affect the work done the other branch.
Multiple branches can be made of a single branch.
Once the work is done in multiple branches, the main focus is to merge all those different branches into the main branch, or the parent branch, to implement all the changes done in the previous branches.

Master branch or Main?
While working on Git or Github, the default branch is known as the master branch, it is the branch that you work on from the beginning whenever you work on a project.
The master branch is not the ultimate branch, it's just a name of the branch, it doesn't hold any kind of ultimate power in Git.
The master branch is like any other branch with just a name. We didn't name it the Master branch, that's just the default name for the branch.
Github in the year 2020, changed the default branch name from master to main, but Git still continues to keep its default branch name as master.
They both are like any other branches, but just with different names. It's easy to change the default branch name, like any other branch name.

What is HEAD?
HEAD is simply a pointer that refers to the current location in your repository. It points to a particular branch reference.
HEAD is always pointing to the last commit on our master branch.
Branches can be considered to be like bookmarks in a book.

Viewing all branches with Git branch
By running the command 'git branch', you can get to know the active branch of your current repository. 
The active branch of your repo has an asterisk at the side.

Creating and Switching branches
The command 'git branch' lists all the branches with the active branch, whereas the command 'git branch branchname' creates a branch with the given branch name.
This above command just creates the branch, it doesn't switch to the created branch, the HEAD stays the same.
To switch from the master/main branch to the newly created branch, use the 'git switch branchname' command.

Git Checkout vs Git Switch
The 'git checkout branchname' is the older way of switching branches, using this command not only switches the branch, but also does a lot other things in addition to that.
So, a much simpler command is now used for the purpose of switching branches, the 'git switch branchname' command.
Instead of creating a branch and switching to that branch in two different steps, it's better to do all that in just one command.
The 'git switch -c branchname' command not only creates a branch, but also switches to that branch that you just created.

Switching branch with unstages changes
While working on a project, if you are on a separate branch, and after working you want to switch the branch with unsaved work on that branch, git will alert you to save the changes by committing your work, otherwise you won't be allowed to move forward with switching to an other branch.
Commit your work on that branch, and then switch to an other branch.

Deleting and Renaming branches
The git command to delete a branch is 'git branch -D branchname', the '-D' is for forceful deletion, because Git doesn't allow the user to delete the branch without having the branch merged with the main branch.
The git command to rename a branch is 'git branch -m newbranchname', the '-m' is the part of the command that helps in the renaming of the branch.
One important thing to remember, is that, while deleting a branch, you need to be anywhere but in the branch that you want to delete, wherease while renaming a branch you have to be in that current branch that you want to rename.

Branching exercise
Solved the branching exercise in the course. Created a directory, and then created an empty folder in it called 'Patronus'.
Next, initiated a repo in that directory, with the command 'git init'.
Next, created a new file called 'Patronus.txt'.
Next, added and committed the file in that repo.
Next, created two branches, 'Harry' and 'Snape', both on the main/master branch, using the commands 'git branch harry' and 'git branch snape'.
Next, edited and added the text to 'Patronus.txt' to Harry's Patronus.
Next, added and committed the file, 'Patronus.txt'.
Next, switched to the 'Snape' branch, and opened the 'Patronus.txt' file, using the 'git switch snape' command.
Next, edited the 'Patronus.txt' file, to add Snape's Patronus.
Next, added and committed the file 'Patronus.txt'.
Next, created and switched to a new branch called 'Lily' based on the 'Snape' branch, using the 'git switch -c lily' command.
Next, edited the 'Patronus.txt' file in 'Lily' branch, and added Lily's Patronus.
Next, switched to the main branch, using the 'git switch main' command.
Next, listed all the branches using the 'git branch' command.
Next, deleted 'Snape' branch, using the 'git branch -D snape' command.

Merging Branches
Branching is super easy to work within self contained context, but sometimes you need to incorporate your work with the final version of a project or with somebody else's version, here is where merging branches comes in handy.
This can be done by using the 'git merge' command.
A really common workflow is to treat the master/main branch, the most stable build of an application, no experiments on that branch, so developers work on an other branch called the feature branch, which is the one where all the experimentation and all the other feature testing is done.
We merge branches not specific commits. We always merge to the current HEAD branch.
Suppose there are two brances, the 'master' branch and the 'bugfix' branch, if you want merge these two branches, first you need to switch to the receiving branch, which in this case is the 'master' branch, and then use the merge command, 'git merge bugfix'.
So this command, takes all the commits from the bugfix and merges it with the commits of the master branch.

Performing a fast forward merge
A fast forward merge is a special case of a merge, simpler merge to perform, commands are the same, from git's perspective it's easy. All it has to do is move up the pointer some number of commits, to fast foward to some destination commit.
By using the command 'git branch -v', it gives more information about the branches than what the usual command would give, it shows details about the last commit, the tip of the branch and the commit message alongside the branch name.
By merging two branches, the branch merged doesn't get deleted, it still stays on the system, you can always edit and add stuff in that particular branch. 
The branches don't always stay in sync, merging is required to do that.

Generating merge commits
Suppose you are working on a project, and you've created a separate branch from the master/main branch, but your teammate who is also working on the same project, makes some changes on the master/main branch.
Now your particular branching doesn't have the commits that were made on the master/main branch, what happens in these scenarios, something called as a merge commit is made, basically git makes a merge commit on the recipient branch, and then it prompts us to include a message. 
This commit is the first commit that has two different parent commits, every commits has one parent commit, commits can have mulitple parent commits.

Merge conflicts
Depending on the specific changes that you've made, git may not be able to merge some changes from one repo to the other, this results in merge conflicts that you manually need to resolve.

Resolving merge conflicts
    - Open the files with merge conflicts.
    - Edit the files to remove the conflicts, decide which content you want to keep.
    - Remove the conflict markers from the document.
    - Add your changes and then make the commit.