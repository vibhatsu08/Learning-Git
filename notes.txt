Notes for the Git course by Colt Steele on Udemy
Github course - Colt Steele

What is Git?
Git is a VCS, It is a version control system, it helps to track and manages changes to files over time.
They help in revising earlier version of files, undoing changes, sharing code to others, team members ,etc. Git is one of many version control systems. 

What does Git help with?
To compare versions of a project, time travel to a previous version of files. Collaborate and compare changes with people. Github like games helps you to create or maintain checkpoints for your code or your project, so that you can go back to the previous checkpoint and start from there instead of starting from scratch every single time. 

Difference between Git and Github
Git exists locally on your system, you don’t need internet to use it, whereas Github is a service which uses Git to work, it hosts your local repositories on your local machine to publish it on the cloud. You do need an internet connection to use Github. Once you changes or update your project via git on your local machine, you can update or upload that project to Github, which can be used by other people to collaborate with your project. Git and Github are not the same thing, Github is a tool that is built for Git and for Git users.

Installing Git: Terminal vs GUIs
What is a GUI? GUI stands for a graphical user interface. It’s basically a type of user interface which enables users to interact with the interface via graphical icons or graphical images. 

Terminal basics
ls - to list the contents of a directory.
cd - to change the directory.
rm - remove a particular file.
rmdir - remove a particular directory.
pwd - prints or displays the path for the current directory that is active.
open - opens the directory in a visual form instead of the terminal based text form.

Very basics of Git
A repository is a workspace which tracks and manages changes in the files within a given folder.
git log - Prints all the logs or entries done in that particular repository. 
git status - Gives information on the status of the current repository.
git init - initialises a new repository in the current folder on directory.
Use 'cd ~' or 'cd' - to navigate back to the home directory.
Use 'cd ..' to navigate up one directory level.
Use 'cd -' to navigate to the previous directory.

Git common mistake
Do not run git init command already inside an initialised git repository. Always use git status to check the status of the current git repository.

Git Committing workflow
Each commit has a description and a title, and each commit is a snapshot in time of your workflow or project in time. It's not the same as saving a file, its something that's built on top of saving the files.
The process of the committing workflow is like: Work on stuff, add changes, and commit the work done.

Adding
The 'git add' command is used to add changes to your existing workflow, or to stage the changes to be committed.
When a commit is made, you are actually changing the contents of the '.git' folder in the current repository.
You can 'git add' multiple files by separating the file names by a single space. 'git add filename1 filename2 ...'.
Git add adds the files in the staging area, which after being changes or modified, is tracked by Git, After being added to the staging area, the files are ready to be committed to the working repository.

Committing
The files after being added to the staging area are now ready to be committed using the 'git commit' command.
Whenever the 'git commit' command is used, Git, will ask you to enter a message, or a description that describes your particular git commit. 
This can be done by two ways, first way is to just type 'git commit', and then the terminal will open a VIM editor, where you need to write your git commit message.
The second way is to type the commit message in just one line, by using the 'git commit -m "your message"' command. 
The '-m' tells Git, that the text after the '-m' is supposed to be a Git commit message/description.

Logging
By using the 'git log' command, Git shows all the previous commits done in that repository, with the respective Git commit name, date, time, git description/message and with a git commit hash.
You can also use the 'git add .' command to add all the modified/changes files to the staging area.









